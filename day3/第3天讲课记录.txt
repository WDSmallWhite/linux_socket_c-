TCP状态转换图:
1 三次握手过程:
	客户端: SYN_SENT---connect()   
	服务端:      LISTEN--listen()   SYN_RCVD
	当三次握手完成后, 都处于ESTABLISHED状态   
2 数据传输过程中状态不发生变化, 都是ESTABLISHED状态
3 四次挥手过程:
	主动关闭方: FIN_WAIT_T  FIN_WAIT_2 TIME_WAIT
	被动关闭方: CLOSE_WAIT  LAST_ACK
	
思考题?
	1 SYN_SENT状态出现在哪一方? 客户端
	2 SYN_RCVD状态出现在哪一方? 服务端
	3 TIME_WAIT状态出现在哪一方?  主动关闭方
	4 在数据传输的时候没有状态变化.
	
TIME_WAIT是如何出现的:
	启动服务端, 启动客户端, 连接建好, 而且也可以正常发送数据;
	然后先关闭服务端, 服务端就会出现TIME_WAIT状态.

为什么需要2MSL时间:

设置端口复用:
	int opt = 1;
	setsockopt(lfd, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof(int));

shutdown和close的区别:
1 shutdown可以实现半关闭, close不行
2 shutdown关闭的时候, 不考虑文件描述符的引用计数, 是直接彻底关闭
  close考虑文件描述符的引用计数, 调用一次close只是将引用计数减1, 
  只有减小到0的时候才会真正关闭.

长连接和端连接的概念:
	长连接: 连接建立好之后,一直保持连接不关闭
	短连接: 连接使用完之后就立刻关闭.
	
什么是心跳包?
	用于监测长连接是否正常的字符串.
在什么情况下使用心跳包?
	主要用于监测长连接是否正常.
如何使用心跳包?
	通信双方需要协商规则(协议), 如4个字节长度+数据部分
	
使用select的开发服务端流程:
1 创建socket, 得到监听文件描述符lfd---socket()
2 设置端口复用-----setsockopt()
3 将lfd和IP  PORT绑定----bind()
4 设置监听---listen()
5 fd_set readfds;  //定义文件描述符集变量
  fd_set tmpfds;
  FD_ZERO(&readfds);  //清空文件描述符集变量
  FD_SET(lfd, &readfds);//将lfd加入到readfds集合中;
  maxfd = lfd;
  while(1)
  {
  	tmpfds = readfds;
  	nready = select(maxfd+1, &tmpfds, NULL, NULL, NULL);
  	if(nready<0)
  	{
  		if(errno==EINTR)//被信号中断
  		{
  			continue;
  		}
  		break;
  	}
  	
  	//有客户端连接请求到来
  	if(FD_ISSET(lfd, &tmpfds))
  	{
  		//接受新的客户端连接请求
  		cfd = accept(lfd, NULL, NULL);
  		
  		//将cfd加入到readfds集合中
  		FD_SET(cfd, &readfds);
  		
  		//修改内核监控的文件描述符的范围
  		if(maxfd<cfd)
  		{
  			maxfd = cfd;
  		}
  		
  		if(--nready==0)
  		{
  			continue;
  		}
  	}
  	
  	
  	//有客户端数据发来
  	for(i=lfd+1; i<=maxfd; i++)
  	{
  		if(FD_ISSET(i, &tmpfds))
  		{
			//read数据
  			n = read(i, buf, sizeof(buf));
  			if(n<=0)
  			{
  				close(i);
  				//将文件描述符i从内核中去除
  				FD_CLR(i, &readfds);
  			}
  			
  			//write应答数据给客户端
  			write(i, buf, n);
  		}
  		
		if(--nready==0)
  		{
  			break;
  		}
  	}
  	
  	close(lfd);
  	
  	return 0;
  }
 
代码优化方向:
int client[1024]
for()
{
	client[i] = -1;
}

1 将通信文件描述符保存到一个整形数组中, 使用一个变量记录
  数组中最大元素的下标maxi.
2 如果数组中有无效的文件描述符, 直接跳过